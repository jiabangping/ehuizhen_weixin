package com.ehuizhen.weixin.controller;

import java.sql.Timestamp;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ehuizhen.weixin.config.JsonConst;
import com.ehuizhen.weixin.config.VerifyCodeUtils;
import com.ehuizhen.weixin.init.ServerConfigConst;
import com.ehuizhen.weixin.model.PatientModel;
import com.ehuizhen.weixin.service.PatientService;
import com.ehuizhen.weixin.service.SmsService;
import com.ehuizhen.weixin.tools.MD5;
import com.ehuizhen.weixin.tools.ValidationTools;

import net.sf.json.JSONObject;

@Controller
public class PatientController {
	private static final Logger log = LoggerFactory.getLogger(PatientController.class);
	
	@Autowired
	private SmsService smsService;
	
	@Autowired
	private PatientService patientService;
	
	
	/**跳转到患者注册页面*/
	@RequestMapping(value = "/patient/signUpPage", method = RequestMethod.GET)
	public ModelAndView signUpPage(HttpServletRequest request,
			HttpServletResponse response, HttpSession session) {
		ModelAndView model = new ModelAndView("/weixin/patient/signUp");
		return model;
	}
	
	/** 跳转到患者登录页面*/
	@RequestMapping(value = "/patient/signInPage", method = RequestMethod.GET)
	public ModelAndView signInPage(HttpServletRequest request,
			HttpServletResponse response, HttpSession session) {
		
		ModelAndView model = new ModelAndView("/weixin/patient/signIn");
		return model;
	}
	
	/**用户获取注册验证码*/
	@RequestMapping(value = "patient/getVerifyCode/{phoneNum}", method = RequestMethod.GET, produces="application/json;charset=UTF-8")
	public @ResponseBody String getVerifyCode(@PathVariable("phoneNum") String phoneNum,HttpServletRequest request,HttpServletResponse response, HttpSession httpSession) {
		if(!ValidationTools.isMobile(phoneNum)) {
			JSONObject result = new JSONObject();
			result.put(JsonConst.result, JsonConst.formatErr);//格式错误
			return result.toString();
		}
		PatientModel model =  patientService.getPatientByPhoneNum(phoneNum);
		if(model != null) {
			JSONObject result = new JSONObject();
			result.put(JsonConst.result, JsonConst.fail);//该手机号已存在，注册过
			return result.toString();
		}
	
		String verifyCode = VerifyCodeUtils.generateVerifyCode(6,"0123456789");
		boolean result = smsService.getVerifyCode(phoneNum, verifyCode);
		
		httpSession.setAttribute(phoneNum+ServerConfigConst.patientVerifyCodeSessionAttr, verifyCode);
		
		if(result) {
			JSONObject json = new JSONObject();
			json.put(JsonConst.result, JsonConst.success);
			json.put("verifyCode", verifyCode);
			return json.toString();	
		}else {
			JSONObject json = new JSONObject();
			json.put(JsonConst.result, JsonConst.fail);
			return json.toString();	
		}
	}
	
	/**判断患者用户名是否已存在*/
	@RequestMapping(value = "patient/existPatientName/{patientName}", method = RequestMethod.GET, produces="application/json;charset=UTF-8")
	public @ResponseBody String existPatientName(@PathVariable("patientName") String patientName,HttpServletRequest request,HttpServletResponse response) {
		PatientModel model =  patientService.getPatientByPatientName(patientName);
		if(model != null) {
			JSONObject result = new JSONObject();
			result.put(JsonConst.result, JsonConst.exist);
			return result.toString();
		}
		JSONObject result = new JSONObject();
		result.put(JsonConst.result, JsonConst.notExist);
		return result.toString();
	}
	
	/**判断患者手机号是否已存在*/
	@RequestMapping(value = "patient/existPhoneNum/{phoneNum}", method = RequestMethod.GET, produces="application/json;charset=UTF-8")
	public @ResponseBody String existPhoneNum(@PathVariable("phoneNum") String phoneNum,HttpServletRequest request,HttpServletResponse response) {
		if(!ValidationTools.isMobile(phoneNum)) {
			JSONObject result = new JSONObject();
			result.put(JsonConst.result, JsonConst.formatErr);//格式错误
			return result.toString();
		}
		PatientModel model =  patientService.getPatientByPhoneNum(phoneNum);
		if(model != null) {
			JSONObject result = new JSONObject();
			result.put(JsonConst.result, JsonConst.exist);
			return result.toString();
		}
		JSONObject result = new JSONObject();
		result.put(JsonConst.result, JsonConst.notExist);
		return result.toString();
	}
	
	/**注册信息*/
	@RequestMapping(value = "patient/signUp", method = RequestMethod.POST, produces="application/json;charset=UTF-8")
	public @ResponseBody String signUp(HttpServletRequest request,HttpServletResponse response,HttpSession session,
			@RequestParam(value = "patientName", required = true) String patientName,
			@RequestParam(value = "phoneNum", required = true) String phoneNum,
			@RequestParam(value = "verifyCode", required = true) String verifyCode,
			@RequestParam(value = "passWord", required = true) String passWord,
			 HttpSession httpSession) {
		try {
			PatientModel p = patientService.getPatientByPatientName(patientName);
			if(p != null) {
				JSONObject json = new JSONObject();
				json.put(JsonConst.result, JsonConst.exist);
				return json.toString();
			}
			String _verifyCode = (String)httpSession.getAttribute(phoneNum+ServerConfigConst.patientVerifyCodeSessionAttr);
			if(_verifyCode != null && _verifyCode.equals(verifyCode)) {//验证码正确
				PatientModel entity = new PatientModel(patientName, phoneNum, passWord, new Timestamp(System.currentTimeMillis()));
				int result = patientService.save(entity);
				Object openId = session.getAttribute(ServerConfigConst.wxOpenIdSessionAttr);
				if(result != -1) {
					try {
						if(openId != null) {
							entity.setOpenId((String)openId);
							entity.setBindStatus(1);
							entity.setId(result);
							patientService.update(entity);
						}
					}catch(Exception e) {
						log.error("微信绑定失败【"+openId+"】【"+entity+"】",e);
					}
					JSONObject json = new JSONObject();
					json.put(JsonConst.result, JsonConst.success);
					return json.toString();
				}else {
					JSONObject json = new JSONObject();
					json.put(JsonConst.result, JsonConst.fail);
					return json.toString();
				}
			} else {
				JSONObject json = new JSONObject();
				json.put(JsonConst.result, JsonConst.verifyError);
				return json.toString();
			}
		}catch(Exception e) {
			log.error(e.getMessage(),e);
			JSONObject json = new JSONObject();
			json.put(JsonConst.result, JsonConst.fail);
			return json.toString();
		}
	}
	
	/**登录请求 */
	@RequestMapping(value = "patient/signIn", method = RequestMethod.POST, produces="application/json;charset=UTF-8")
	public @ResponseBody String signIn(HttpServletRequest request,HttpServletResponse response,
			@RequestParam(value = "patientNameOrPhoneNum", required = true) String patientNameOrPhoneNum,
			@RequestParam(value = "passWord", required = true) String passWord,
			HttpSession session) {
		
		PatientModel p1 = null;
		PatientModel p2 = null;
		try {
			p1 = patientService.getPatientByPatientName(patientNameOrPhoneNum);
			p2 = patientService.getPatientByPhoneNum(patientNameOrPhoneNum);
			if(p1 != null) {
				boolean nameCorrect = false;
				boolean passWordCorrect = false;
				if(patientNameOrPhoneNum.equals(p1.getPatientName()) || patientNameOrPhoneNum.equals(p1.getPhoneNum()) ) {
					nameCorrect = true;
				}
				if(MD5.encodeByMD5(passWord).equals(p1.getPassWord())) {
					passWordCorrect = true;
				}
				if(nameCorrect && passWordCorrect) {
					//信息正确
					session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p1);
					if(p1.getBindStatus() != 1) {
						Object openId = session.getAttribute(ServerConfigConst.wxOpenIdSessionAttr);
						try {
							if(openId != null) {
								p1.setOpenId((String)openId);
								p1.setBindStatus(1);
								log.error("绑定openId="+openId+","+p1);
								ServerConfigConst.patientService.update(p1);
								session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p1);
							}
						}catch(Exception e) {
							log.error(e.getMessage(),e);
						}
					}
					JSONObject json = new JSONObject();
					json.put(JsonConst.result, JsonConst.success);
					return json.toString();
				} 
			}
		
			if(p2 != null) {
				boolean nameCorrect_2 = false;
				boolean passWordCorrect_2 = false;
				if(patientNameOrPhoneNum.equals(p2.getPatientName()) || patientNameOrPhoneNum.equals(p2.getPhoneNum()) ) {
					nameCorrect_2 = true;
				}
				if(MD5.encodeByMD5(passWord).equals(p2.getPassWord())) {
					passWordCorrect_2 = true;
				}
				if(nameCorrect_2 && passWordCorrect_2) {
					//信息认证正确
					session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p2);
					if(p2.getBindStatus() != 1) {
						Object openId = session.getAttribute(ServerConfigConst.wxOpenIdSessionAttr);
						try {
							if(openId != null) {
								p2.setOpenId((String)openId);
								p2.setBindStatus(1);
								log.error("绑定openId="+openId+","+p2);
								ServerConfigConst.patientService.update(p2);
								session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p2);
							}
						}catch(Exception e){
							log.error(e.getMessage(),e);
						}
					}
					JSONObject json = new JSONObject();
					json.put(JsonConst.result, JsonConst.success);
					return json.toString();
				}
				
			}
		}catch(Exception e) {
			log.error(e.getMessage(),e);
		}
		
		//认证失败
		JSONObject json = new JSONObject();
		json.put(JsonConst.result, JsonConst.fail);
		return json.toString();
	}
	
	
	
	/** 跳转到患者绑定页面*/
	@RequestMapping(value = "/patient/wxBindPage", method = RequestMethod.GET)
	public ModelAndView bindWxPage(HttpServletRequest request,
			HttpServletResponse response, HttpSession session) {
		
		ModelAndView model = new ModelAndView("/weixin/patient/wxBind");
		return model;
	}
	
	
	
	/**绑定请求 */
	@RequestMapping(value = "patient/wxBind", method = RequestMethod.POST, produces="application/json;charset=UTF-8")
	public @ResponseBody String wxBind(HttpServletRequest request,HttpServletResponse response,
			@RequestParam(value = "patientNameOrPhoneNum", required = true) String patientNameOrPhoneNum,
			@RequestParam(value = "passWord", required = true) String passWord,
			HttpSession session) {
		
		PatientModel p1 = null;
		PatientModel p2 = null;
		try {
			p1 = patientService.getPatientByPatientName(patientNameOrPhoneNum);
			p2 = patientService.getPatientByPhoneNum(patientNameOrPhoneNum);
			if(p1 != null) {
				boolean nameCorrect = false;
				boolean passWordCorrect = false;
				if(patientNameOrPhoneNum.equals(p1.getPatientName()) || patientNameOrPhoneNum.equals(p1.getPhoneNum()) ) {
					nameCorrect = true;
				}
				if(MD5.encodeByMD5(passWord).equals(p1.getPassWord())) {
					passWordCorrect = true;
				}
				if(nameCorrect && passWordCorrect) {
					//信息正确
					session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p1);
					if(p1.getBindStatus() != 1) {
						Object openId = session.getAttribute(ServerConfigConst.wxOpenIdSessionAttr);
						try {
							if(openId != null) {
								p1.setOpenId((String)openId);
								p1.setBindStatus(1);
								log.error("绑定openId="+openId+","+p1);
								ServerConfigConst.patientService.update(p1);
								session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p1);
							}
						}catch(Exception e) {
							log.error(e.getMessage(),e);
						}
					}
					JSONObject json = new JSONObject();
					json.put(JsonConst.result, JsonConst.success);
					return json.toString();
				} 
			}
		
			if(p2 != null) {
				boolean nameCorrect_2 = false;
				boolean passWordCorrect_2 = false;
				if(patientNameOrPhoneNum.equals(p2.getPatientName()) || patientNameOrPhoneNum.equals(p2.getPhoneNum()) ) {
					nameCorrect_2 = true;
				}
				if(MD5.encodeByMD5(passWord).equals(p2.getPassWord())) {
					passWordCorrect_2 = true;
				}
				if(nameCorrect_2 && passWordCorrect_2) {
					//信息认证正确
					session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p2);
					if(p2.getBindStatus() != 1) {
						Object openId = session.getAttribute(ServerConfigConst.wxOpenIdSessionAttr);
						try {
							if(openId != null) {
								p2.setOpenId((String)openId);
								p2.setBindStatus(1);
								log.error("绑定openId="+openId+","+p2);
								ServerConfigConst.patientService.update(p2);
								session.setAttribute(ServerConfigConst.patientInfoSessionAttr, p2);
							}
						}catch(Exception e){
							log.error(e.getMessage(),e);
						}
					}
					JSONObject json = new JSONObject();
					json.put(JsonConst.result, JsonConst.success);
					return json.toString();
				}
				
			}
		}catch(Exception e) {
			log.error(e.getMessage(),e);
		}
		
		//认证失败
		JSONObject json = new JSONObject();
		json.put(JsonConst.result, JsonConst.fail);
		return json.toString();
	}
	
	
	
}
